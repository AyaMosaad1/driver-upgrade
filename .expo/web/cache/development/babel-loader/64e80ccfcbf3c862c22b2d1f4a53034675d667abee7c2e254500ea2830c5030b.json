{"ast":null,"code":"'use strict';\n\nimport invariant from 'invariant';\nimport { Commands } from \"../View/ViewNativeComponent\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nexport default function useAndroidRippleForView(rippleConfig, viewRef) {\n  var _ref = rippleConfig != null ? rippleConfig : {},\n    color = _ref.color,\n    borderless = _ref.borderless,\n    radius = _ref.radius;\n  return useMemo(function () {\n    if (Platform.OS === 'android' && Platform.Version >= 21 && (color != null || borderless != null || radius != null)) {\n      var processedColor = processColor(color);\n      invariant(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');\n      return {\n        viewProps: {\n          nativeBackgroundAndroid: {\n            type: 'RippleAndroid',\n            color: processedColor,\n            borderless: borderless === true,\n            rippleRadius: radius\n          }\n        },\n        onPressIn: function onPressIn(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            var _event$nativeEvent$lo, _event$nativeEvent$lo2;\n            Commands.setPressed(view, true);\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);\n          }\n        },\n        onPressMove: function onPressMove(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);\n          }\n        },\n        onPressOut: function onPressOut(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        }\n      };\n    }\n    return null;\n  }, [color, borderless, radius, viewRef]);\n}","map":{"version":3,"names":["invariant","Commands","Platform","View","processColor","React","useMemo","useAndroidRippleForView","rippleConfig","viewRef","_ref","color","borderless","radius","OS","Version","processedColor","viewProps","nativeBackgroundAndroid","type","rippleRadius","onPressIn","event","view","current","_event$nativeEvent$lo","_event$nativeEvent$lo2","setPressed","hotspotUpdate","nativeEvent","locationX","locationY","onPressMove","_event$nativeEvent$lo3","_event$nativeEvent$lo4","onPressOut"],"sources":["C:/Users/Ayamo/Downloads/driver-master/node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\nimport {Commands} from '../View/ViewNativeComponent';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport {Platform, View, processColor} from 'react-native';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ColorValue,\n  borderless?: boolean,\n  radius?: number,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps: $ReadOnly<{|\n    nativeBackgroundAndroid: NativeBackgroundProp,\n  |}>,\n|}> {\n  const {color, borderless, radius} = rippleConfig ?? {};\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= 21 &&\n      (color != null || borderless != null || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      return {\n        viewProps: {\n          // Consider supporting `nativeForegroundAndroid`\n          nativeBackgroundAndroid: {\n            type: 'RippleAndroid',\n            color: processedColor,\n            borderless: borderless === true,\n            rippleRadius: radius,\n          },\n        },\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, true);\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [color, borderless, radius, viewRef]);\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,OAAOA,SAAS,MAAM,WAAW;AACjC,SAAQC,QAAQ;AAAqC,OAAAC,QAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,YAAA;AAIrD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,OAAO,QAAO,OAAO;AAmB7B,eAAe,SAASC,uBAAuBA,CAC7CC,YAA2B,EAC3BC,OAA0D,EAQxD;EACF,IAAAC,IAAA,GAAoCF,YAAY,WAAZA,YAAY,GAAI,CAAC,CAAC;IAA/CG,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;EAEhC,OAAOP,OAAO,CAAC,YAAM;IACnB,IACEJ,QAAQ,CAACY,EAAE,KAAK,SAAS,IACzBZ,QAAQ,CAACa,OAAO,IAAI,EAAE,KACrBJ,KAAK,IAAI,IAAI,IAAIC,UAAU,IAAI,IAAI,IAAIC,MAAM,IAAI,IAAI,CAAC,EACvD;MACA,IAAMG,cAAc,GAAGZ,YAAY,CAACO,KAAK,CAAC;MAC1CX,SAAS,CACPgB,cAAc,IAAI,IAAI,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAC5D,yCACF,CAAC;MAED,OAAO;QACLC,SAAS,EAAE;UAETC,uBAAuB,EAAE;YACvBC,IAAI,EAAE,eAAe;YACrBR,KAAK,EAAEK,cAAc;YACrBJ,UAAU,EAAEA,UAAU,KAAK,IAAI;YAC/BQ,YAAY,EAAEP;UAChB;QACF,CAAC;QACDQ,SAAS,WAAAA,UAACC,KAAiB,EAAQ;UACjC,IAAMC,IAAI,GAAGd,OAAO,CAACe,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAAA,IAAAE,qBAAA,EAAAC,sBAAA;YAChBzB,QAAQ,CAAC0B,UAAU,CAACJ,IAAI,EAAE,IAAI,CAAC;YAC/BtB,QAAQ,CAAC2B,aAAa,CACpBL,IAAI,GAAAE,qBAAA,GACJH,KAAK,CAACO,WAAW,CAACC,SAAS,YAAAL,qBAAA,GAAI,CAAC,GAAAC,sBAAA,GAChCJ,KAAK,CAACO,WAAW,CAACE,SAAS,YAAAL,sBAAA,GAAI,CACjC,CAAC;UACH;QACF,CAAC;QACDM,WAAW,WAAAA,YAACV,KAAiB,EAAQ;UACnC,IAAMC,IAAI,GAAGd,OAAO,CAACe,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAAA,IAAAU,sBAAA,EAAAC,sBAAA;YAChBjC,QAAQ,CAAC2B,aAAa,CACpBL,IAAI,GAAAU,sBAAA,GACJX,KAAK,CAACO,WAAW,CAACC,SAAS,YAAAG,sBAAA,GAAI,CAAC,GAAAC,sBAAA,GAChCZ,KAAK,CAACO,WAAW,CAACE,SAAS,YAAAG,sBAAA,GAAI,CACjC,CAAC;UACH;QACF,CAAC;QACDC,UAAU,WAAAA,WAACb,KAAiB,EAAQ;UAClC,IAAMC,IAAI,GAAGd,OAAO,CAACe,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAChBtB,QAAQ,CAAC0B,UAAU,CAACJ,IAAI,EAAE,KAAK,CAAC;UAClC;QACF;MACF,CAAC;IACH;IACA,OAAO,IAAI;EACb,CAAC,EAAE,CAACZ,KAAK,EAAEC,UAAU,EAAEC,MAAM,EAAEJ,OAAO,CAAC,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}