{"ast":null,"code":"'use strict';\n\nvar getNativeComponentAttributes = require(\"../ReactNative/getNativeComponentAttributes\");\nimport ReactNativeViewViewConfig from \"../Components/View/ReactNativeViewViewConfig\";\nvar IGNORED_KEYS = ['transform', 'hitSlop'];\nfunction verifyComponentAttributeEquivalence(componentName, config) {\n  if (!global.RN$Bridgeless) {\n    var nativeAttributes = getNativeComponentAttributes(componentName);\n    ['validAttributes', 'bubblingEventTypes', 'directEventTypes'].forEach(function (prop) {\n      var diffKeys = Object.keys(lefthandObjectDiff(nativeAttributes[prop], config[prop]));\n      if (diffKeys.length) {\n        console.error(componentName + \" generated view config for \" + prop + \" does not match native, missing: \" + diffKeys.join(' '));\n      }\n    });\n  }\n}\nexport function lefthandObjectDiff(leftObj, rightObj) {\n  var differentKeys = {};\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n    if (typeof leftItem === 'object') {\n      var objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n  for (var key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n  return differentKeys;\n}\nexport function getConfigWithoutViewProps(viewConfig, propName) {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n  return Object.keys(viewConfig[propName]).filter(function (prop) {\n    return !ReactNativeViewViewConfig[propName][prop];\n  }).reduce(function (obj, prop) {\n    obj[prop] = viewConfig[propName][prop];\n    return obj;\n  }, {});\n}\nexport function stringifyViewConfig(viewConfig) {\n  return JSON.stringify(viewConfig, function (key, val) {\n    if (typeof val === 'function') {\n      return \"\\u0192 \" + val.name;\n    }\n    return val;\n  }, 2);\n}\nexport default verifyComponentAttributeEquivalence;","map":{"version":3,"names":["getNativeComponentAttributes","require","ReactNativeViewViewConfig","IGNORED_KEYS","verifyComponentAttributeEquivalence","componentName","config","global","RN$Bridgeless","nativeAttributes","forEach","prop","diffKeys","Object","keys","lefthandObjectDiff","length","console","error","join","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","key","objDiff","includes","hasOwnProperty","getConfigWithoutViewProps","viewConfig","propName","filter","reduce","obj","stringifyViewConfig","JSON","stringify","val","name"],"sources":["C:/Users/Ayamo/Downloads/driver-master/node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getNativeComponentAttributes = require('../ReactNative/getNativeComponentAttributes');\n\nimport ReactNativeViewViewConfig from '../Components/View/ReactNativeViewViewConfig';\nimport type {ReactNativeBaseComponentViewConfig} from '../Renderer/shims/ReactNativeTypes';\n\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\n/**\n * The purpose of this function is to validate that the view config that\n * native exposes for a given view manager is the same as the view config\n * that is specified for that view manager in JS.\n *\n * In order to improve perf, we want to avoid calling into native to get\n * the view config when each view manager is used. To do this, we are moving\n * the configs to JS. In the future we will use these JS based view configs\n * to codegen the view manager on native to ensure they stay in sync without\n * this runtime check.\n *\n * If this function fails, that likely means a change was made to the native\n * view manager without updating the JS config as well. Ideally you can make\n * that direct change to the JS config. If you don't know what the differences\n * are, the best approach I've found is to create a view that prints\n * the return value of getNativeComponentAttributes, and then copying that\n * text and pasting it back into JS:\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\n *\n * This is meant to be a stopgap until the time comes when we only have a\n * single source of truth. I wonder if this message will still be here two\n * years from now...\n */\nfunction verifyComponentAttributeEquivalence(\n  componentName: string,\n  config: ReactNativeBaseComponentViewConfig<>,\n) {\n  if (!global.RN$Bridgeless) {\n    const nativeAttributes = getNativeComponentAttributes(componentName);\n\n    ['validAttributes', 'bubblingEventTypes', 'directEventTypes'].forEach(\n      prop => {\n        const diffKeys = Object.keys(\n          lefthandObjectDiff(nativeAttributes[prop], config[prop]),\n        );\n\n        if (diffKeys.length) {\n          console.error(\n            `${componentName} generated view config for ${prop} does not match native, missing: ${diffKeys.join(\n              ' ',\n            )}`,\n          );\n        }\n      },\n    );\n  }\n}\n\nexport function lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\n  const differentKeys = {};\n\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nexport function getConfigWithoutViewProps(\n  viewConfig: ReactNativeBaseComponentViewConfig<>,\n  propName: string,\n): {...} {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName])\n    .filter(prop => !ReactNativeViewViewConfig[propName][prop])\n    .reduce((obj, prop) => {\n      obj[prop] = viewConfig[propName][prop];\n      return obj;\n    }, {});\n}\n\nexport function stringifyViewConfig(viewConfig: any): string {\n  return JSON.stringify(\n    viewConfig,\n    (key, val) => {\n      if (typeof val === 'function') {\n        return `Æ’ ${val.name}`;\n      }\n      return val;\n    },\n    2,\n  );\n}\n\nexport default verifyComponentAttributeEquivalence;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}