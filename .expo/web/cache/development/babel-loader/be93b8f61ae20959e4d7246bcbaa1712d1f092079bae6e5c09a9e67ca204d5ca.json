{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { DEVICE_CONNECTIVITY_EVENT } from \"./privateTypes\";\nimport { NetInfoStateType, NetInfoCellularGeneration } from \"./types\";\nvar connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\nvar typeMapping = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other\n};\nvar effectiveTypeMapping = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g']\n};\nvar _getCurrentState = function getCurrentState(_requestedInterface) {\n  var isConnected = navigator.onLine;\n  var baseState = {\n    isInternetReachable: null\n  };\n  if (!connection) {\n    if (isConnected) {\n      var _state2 = _objectSpread(_objectSpread({}, baseState), {}, {\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false\n        }\n      });\n      return _state2;\n    }\n    var _state = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null\n    });\n    return _state;\n  }\n  var isConnectionExpensive = connection.saveData;\n  var type = connection.type ? typeMapping[connection.type] : isConnected ? NetInfoStateType.other : NetInfoStateType.unknown;\n  if (type === NetInfoStateType.bluetooth) {\n    var _state3 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive\n      }\n    });\n    return _state3;\n  } else if (type === NetInfoStateType.cellular) {\n    var _state4 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        cellularGeneration: effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null\n      }\n    });\n    return _state4;\n  } else if (type === NetInfoStateType.ethernet) {\n    var _state5 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        ipAddress: null,\n        subnet: null\n      }\n    });\n    return _state5;\n  } else if (type === NetInfoStateType.wifi) {\n    var _state6 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null\n      }\n    });\n    return _state6;\n  } else if (type === NetInfoStateType.wimax) {\n    var _state7 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive\n      }\n    });\n    return _state7;\n  } else if (type === NetInfoStateType.none) {\n    var _state8 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: type,\n      details: null\n    });\n    return _state8;\n  } else if (type === NetInfoStateType.unknown) {\n    var _state9 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: isConnected,\n      isInternetReachable: null,\n      type: type,\n      details: null\n    });\n    return _state9;\n  }\n  var state = _objectSpread(_objectSpread({}, baseState), {}, {\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive: isConnectionExpensive\n    }\n  });\n  return state;\n};\nvar handlers = [];\nvar nativeHandlers = [];\nvar RNCNetInfo = {\n  addListener: function addListener(type, handler) {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT:\n        {\n          var nativeHandler = function nativeHandler() {\n            handler(_getCurrentState());\n          };\n          if (connection) {\n            connection.addEventListener('change', nativeHandler);\n          } else {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n          handlers.push(handler);\n          nativeHandlers.push(nativeHandler);\n          break;\n        }\n    }\n  },\n  removeListeners: function removeListeners(type, handler) {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT:\n        {\n          var index = handlers.indexOf(handler);\n          var nativeHandler = nativeHandlers[index];\n          if (connection) {\n            connection.removeEventListener('change', nativeHandler);\n          } else {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n          handlers.splice(index, 1);\n          nativeHandlers.splice(index, 1);\n          break;\n        }\n    }\n  },\n  getCurrentState: function getCurrentState(requestedInterface) {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", _getCurrentState(requestedInterface));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  configure: function configure() {\n    return;\n  }\n};\nexport default RNCNetInfo;","map":{"version":3,"names":["DEVICE_CONNECTIVITY_EVENT","NetInfoStateType","NetInfoCellularGeneration","connection","window","navigator","mozConnection","webkitConnection","typeMapping","bluetooth","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","_objectSpread","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","_callee","_regeneratorRuntime","async","_callee$","_context","prev","next","abrupt","stop","Promise","configure"],"sources":["C:\\Users\\Ayamo\\Downloads\\driver-master\\node_modules\\@react-native-community\\netinfo\\lib\\module\\internal\\nativeModule.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  NetInfoNativeModule,\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoNoConnectionState,\n  NetInfoCellularState,\n  NetInfoBluetoothState,\n  NetInfoEthernetState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n  NetInfoOtherState,\n  NetInfoCellularGeneration,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n\n// Check if the browser supports the connection API\nconst connection =\n  window.navigator.connection ||\n  window.navigator.mozConnection ||\n  window.navigator.webkitConnection;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = navigator.onLine;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler, false);\n          window.addEventListener('offline', nativeHandler, false);\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          window.removeEventListener('online', nativeHandler);\n          window.removeEventListener('offline', nativeHandler);\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}