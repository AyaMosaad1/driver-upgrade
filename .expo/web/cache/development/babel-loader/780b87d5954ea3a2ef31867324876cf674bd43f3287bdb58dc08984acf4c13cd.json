{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport messaging from \"@react-native-firebase/messaging\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-root-toast\";\nimport PushNotification from \"react-native-push-notification\";\nPushNotification.createChannel({\n  channelId: \"shorex driver app notifications\",\n  channelName: \"com.shorexdriver\",\n  channelDescription: \"manager notifications\",\n  soundName: \"default\",\n  importance: 4,\n  vibrate: true\n}, function (created) {\n  return console.log(\"createChannel returned '\" + created + \"'\");\n});\nexport function requestUserPermissions() {\n  var authStatus, enabled;\n  return _regeneratorRuntime.async(function requestUserPermissions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(messaging().requestPermission());\n        case 2:\n          authStatus = _context.sent;\n          enabled = authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n          if (enabled) {\n            console.log(\"Authorization status:\", authStatus);\n            getFcmToken();\n          }\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar getFcmToken = function getFcmToken() {\n  var fcmToken, _fcmToken;\n  return _regeneratorRuntime.async(function getFcmToken$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"fcmToken\"));\n        case 2:\n          fcmToken = _context2.sent;\n          console.log(\"the user old token===>\", fcmToken);\n          if (fcmToken) {\n            _context2.next = 19;\n            break;\n          }\n          _context2.prev = 5;\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(messaging().getToken());\n        case 8:\n          _fcmToken = _context2.sent;\n          if (!_fcmToken) {\n            _context2.next = 13;\n            break;\n          }\n          console.log(\"new generated fcm token===>\", _fcmToken);\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"fcmToken\", _fcmToken));\n        case 13:\n          _context2.next = 19;\n          break;\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](5);\n          console.log(\"error rasied fcm token===>\", _context2.t0);\n          Toast.show(_context2.t0.message);\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[5, 15]], Promise);\n};","map":{"version":3,"names":["messaging","AsyncStorage","Toast","PushNotification","createChannel","channelId","channelName","channelDescription","soundName","importance","vibrate","created","console","log","requestUserPermissions","authStatus","enabled","_regeneratorRuntime","async","requestUserPermissions$","_context","prev","next","awrap","requestPermission","sent","AuthorizationStatus","AUTHORIZED","PROVISIONAL","getFcmToken","stop","Promise","fcmToken","_fcmToken","getFcmToken$","_context2","getItem","getToken","setItem","t0","show","message"],"sources":["C:/Users/Ayamo/Downloads/driver-master/Utils/pushnotification_helper.js"],"sourcesContent":["import messaging from \"@react-native-firebase/messaging\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-root-toast\";\nimport PushNotification from \"react-native-push-notification\";\n\nPushNotification.createChannel(\n  {\n    channelId: \"shorex driver app notifications\", // (required)\n    channelName: \"com.shorexdriver\", // (required)\n    channelDescription: \"manager notifications\", // (optional) default: undefined.\n    soundName: \"default\", // (optional) See `soundName` parameter of `localNotification` function\n    importance: 4, // (optional) default: 4. Int value of the Android notification importance\n    vibrate: true, // (optional) default: true. Creates the default vibration patten if true.\n  },\n  (created) => console.log(`createChannel returned '${created}'`)\n);\nexport async function requestUserPermissions() {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED ||\n    authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log(\"Authorization status:\", authStatus);\n    getFcmToken();\n  }\n}\n\nconst getFcmToken = async () => {\n  let fcmToken = await AsyncStorage.getItem(\"fcmToken\");\n  console.log(\"the user old token===>\", fcmToken);\n  if (!fcmToken) {\n    try {\n      const fcmToken = await messaging().getToken();\n      if (fcmToken) {\n        console.log(\"new generated fcm token===>\", fcmToken),\n          await AsyncStorage.setItem(\"fcmToken\", fcmToken);\n      }\n    } catch (error) {\n      console.log(\"error rasied fcm token===>\", error);\n      Toast.show(error.message);\n    }\n  }\n};\n\n// export const NotificationListener = async () => {\n//   const disptach = useDispatch();\n//   // Assume a message-notification contains a \"type\" property in the data payload of the screen to open\n\n//   messaging().onNotificationOpenedApp((remoteMessage) => {\n//     console.log(\n//       \"Notification caused app to open from background state:\",\n//       remoteMessage.notification\n//     );\n//     // Check whether an initial notification is available\n//     messaging()\n//       .getInitialNotification()\n//       .then((remoteMessage) => {\n//         if (remoteMessage) {\n//           console.log(\n//             \"Notification caused app to open from quit state:\",\n//             remoteMessage.notification\n//           );\n//         }\n//       });\n//     //navigation.navigate(remoteMessage.data.type);\n//   });\n//   //   messaging().onNotificationOpenedApp((remoteMessage) => {\n//   //     if (remoteMessage.data.entity === \"ideas\") {\n//   //       console.log(\n//   //         \"Notification caused app to open from background state:\",\n//   //         remoteMessage.data.id\n//   //       );\n//   //     //   let ids = JSON.parse(remoteMessage.data.id);\n//   //     //   RootNavigation.navigate(\"NotificationCards\", {\n//   //     //     IDs: ids,\n//   //     //   });\n//   //     }\n//   //   });\n\n//   messaging().onMessage(async (remoteMessage) => {\n//     // if (remoteMessage.data.entity === \"ideas\") {\n//     console.log(\"recived in foreground===>\", remoteMessage);\n\n//     PushNotification.localNotification({\n//       channelId: \"shorex driver app notifications\",\n//       message: remoteMessage.notification.body,\n//       title: remoteMessage.notification.title,\n//       bigPictureUrl: remoteMessage.notification.android.imageUrl,\n//       smallIcon: remoteMessage.notification.android.imageUrl,\n//     });\n//     // let ids = JSON.parse(remoteMessage.data.id);\n//     // RootNavigation.navigate(\"NotificationCards\", {\n//     //   IDs: ids,\n//     // });\n//     // }\n//   });\n\n//   //   messaging()\n//   //     .getInitialNotification()\n//   //     .then(async (remoteMessage) => {\n//   //       if (remoteMessage.data.entity === \"ideas\") {\n//   //         let ids = JSON.parse(remoteMessage.data.id);\n//   //         await AsyncStorage.setItem(\"postIDs\", JSON.stringify(ids));\n//   //         let storage = await AsyncStorage.getItem(\"postIDs\");\n//   //         console.log(\"storage\", storage);\n//   //         RootNavigation.navigate(\"NotificationCards\", {\n//   //           IDs: ids,\n//   //         });\n//   //         console.log(\n//   //           \"Notification caused app to open from quit state:\",\n//   //           remoteMessage.data.id\n//   //         );\n//   //       }\n//   //     });\n\n//   // messaging().onMessage(async (remoteMessage) => {\n//   //   console.log(\"Notification on forground state\", remoteMessage);\n//   // });\n// };\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,kCAAkC;AACxD,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,gBAAgB,MAAM,gCAAgC;AAE7DA,gBAAgB,CAACC,aAAa,CAC5B;EACEC,SAAS,EAAE,iCAAiC;EAC5CC,WAAW,EAAE,kBAAkB;EAC/BC,kBAAkB,EAAE,uBAAuB;EAC3CC,SAAS,EAAE,SAAS;EACpBC,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE;AACX,CAAC,EACD,UAACC,OAAO;EAAA,OAAKC,OAAO,CAACC,GAAG,8BAA4BF,OAAO,MAAG,CAAC;AAAA,CACjE,CAAC;AACD,OAAO,SAAeG,sBAAsBA,CAAA;EAAA,IAAAC,UAAA,EAAAC,OAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,wBAAAC,QAAA;IAAA;MAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CACjBvB,SAAS,CAAC,CAAC,CAACwB,iBAAiB,CAAC,CAAC;QAAA;UAAlDT,UAAU,GAAAK,QAAA,CAAAK,IAAA;UACVT,OAAO,GACXD,UAAU,KAAKf,SAAS,CAAC0B,mBAAmB,CAACC,UAAU,IACvDZ,UAAU,KAAKf,SAAS,CAAC0B,mBAAmB,CAACE,WAAW;UAE1D,IAAIZ,OAAO,EAAE;YACXJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,UAAU,CAAC;YAChDc,WAAW,CAAC,CAAC;UACf;QAAC;QAAA;UAAA,OAAAT,QAAA,CAAAU,IAAA;MAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAGH,IAAMF,WAAW,GAAG,SAAdA,WAAWA,CAAA;EAAA,IAAAG,QAAA,EAAAC,SAAA;EAAA,OAAAhB,mBAAA,CAAAC,KAAA,UAAAgB,aAAAC,SAAA;IAAA;MAAA,QAAAA,SAAA,CAAAd,IAAA,GAAAc,SAAA,CAAAb,IAAA;QAAA;UAAAa,SAAA,CAAAb,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CACMtB,YAAY,CAACmC,OAAO,CAAC,UAAU,CAAC;QAAA;UAAjDJ,QAAQ,GAAAG,SAAA,CAAAV,IAAA;UACZb,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEmB,QAAQ,CAAC;UAAC,IAC3CA,QAAQ;YAAAG,SAAA,CAAAb,IAAA;YAAA;UAAA;UAAAa,SAAA,CAAAd,IAAA;UAAAc,SAAA,CAAAb,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CAEcvB,SAAS,CAAC,CAAC,CAACqC,QAAQ,CAAC,CAAC;QAAA;UAAvCL,SAAQ,GAAAG,SAAA,CAAAV,IAAA;UAAA,KACVO,SAAQ;YAAAG,SAAA,CAAAb,IAAA;YAAA;UAAA;UACVV,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEmB,SAAQ,CAAC;UAAAG,SAAA,CAAAb,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CAC5CtB,YAAY,CAACqC,OAAO,CAAC,UAAU,EAAEN,SAAQ,CAAC;QAAA;UAAAG,SAAA,CAAAb,IAAA;UAAA;QAAA;UAAAa,SAAA,CAAAd,IAAA;UAAAc,SAAA,CAAAI,EAAA,GAAAJ,SAAA;UAGpDvB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAAsB,SAAA,CAAAI,EAAO,CAAC;UAChDrC,KAAK,CAACsC,IAAI,CAACL,SAAA,CAAAI,EAAA,CAAME,OAAO,CAAC;QAAC;QAAA;UAAA,OAAAN,SAAA,CAAAL,IAAA;MAAA;IAAA;EAAA,0BAAAC,OAAA;AAAA,CAG/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}