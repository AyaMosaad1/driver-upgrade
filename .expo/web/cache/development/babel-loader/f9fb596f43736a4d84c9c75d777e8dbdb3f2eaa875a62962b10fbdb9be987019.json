{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport NativeEventEmitter from \"../EventEmitter/NativeEventEmitter\";\nimport logError from \"../Utilities/logError\";\nimport EventEmitter from \"../vendor/emitter/EventEmitter\";\nimport NativeAppState from \"./NativeAppState\";\nimport invariant from 'invariant';\nvar AppState = function (_NativeEventEmitter) {\n  _inherits(AppState, _NativeEventEmitter);\n  var _super = _createSuper(AppState);\n  function AppState() {\n    var _this;\n    _classCallCheck(this, AppState);\n    _this = _super.call(this, NativeAppState);\n    _this._supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];\n    _this.isAvailable = true;\n    _this._eventHandlers = _this._supportedEvents.reduce(function (handlers, key) {\n      handlers[key] = new Map();\n      return handlers;\n    }, {});\n    _this.currentState = NativeAppState.getConstants().initialAppState;\n    var eventUpdated = false;\n    _this.addListener('appStateDidChange', function (appStateData) {\n      eventUpdated = true;\n      _this.currentState = appStateData.app_state;\n    });\n    NativeAppState.getCurrentAppState(function (appStateData) {\n      if (!eventUpdated && _this.currentState !== appStateData.app_state) {\n        _this.currentState = appStateData.app_state;\n        _this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n    return _this;\n  }\n  _createClass(AppState, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      invariant(this._supportedEvents.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      switch (type) {\n        case 'change':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {\n              handler(appStateData.app_state);\n            }));\n            break;\n          }\n        case 'memoryWarning':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));\n            break;\n          }\n        case 'blur':\n        case 'focus':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('appStateFocusChange', function (hasFocus) {\n              if (type === 'blur' && !hasFocus) {\n                handler();\n              }\n              if (type === 'focus' && hasFocus) {\n                handler();\n              }\n            }));\n          }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      invariant(this._supportedEvents.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n      if (!this._eventHandlers[type].has(handler)) {\n        return;\n      }\n      this._eventHandlers[type].get(handler).remove();\n      this._eventHandlers[type].delete(handler);\n    }\n  }]);\n  return AppState;\n}(NativeEventEmitter);\nfunction throwMissingNativeModule() {\n  invariant(false, 'Cannot use AppState module when native RCTAppState is not included in the build.\\n' + 'Either include it, or check AppState.isAvailable before calling any methods.');\n}\nvar MissingNativeAppStateShim = function (_EventEmitter) {\n  _inherits(MissingNativeAppStateShim, _EventEmitter);\n  var _super2 = _createSuper(MissingNativeAppStateShim);\n  function MissingNativeAppStateShim() {\n    var _this2;\n    _classCallCheck(this, MissingNativeAppStateShim);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    _this2.isAvailable = false;\n    _this2.currentState = null;\n    return _this2;\n  }\n  _createClass(MissingNativeAppStateShim, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener() {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      throwMissingNativeModule();\n    }\n  }]);\n  return MissingNativeAppStateShim;\n}(EventEmitter);\nvar AppStateInstance = NativeAppState ? new AppState() : new MissingNativeAppStateShim();\nmodule.exports = AppStateInstance;","map":{"version":3,"names":["_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","NativeEventEmitter","logError","EventEmitter","NativeAppState","invariant","AppState","_NativeEventEmitter","_super","_this","_supportedEvents","isAvailable","_eventHandlers","reduce","handlers","key","Map","currentState","getConstants","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","value","addEventListener","type","handler","indexOf","set","hasFocus","removeEventListener","has","get","remove","delete","throwMissingNativeModule","MissingNativeAppStateShim","_EventEmitter","_super2","_this2","_len","length","args","Array","_key","concat","removeAllListeners","removeSubscription","AppStateInstance","module","exports"],"sources":["C:/Users/Ayamo/Downloads/driver-master/node_modules/react-native/Libraries/AppState/AppState.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport logError from '../Utilities/logError';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport NativeAppState from './NativeAppState';\nimport invariant from 'invariant';\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See https://reactnative.dev/docs/appstate.html\n */\nclass AppState extends NativeEventEmitter {\n  _eventHandlers: Object;\n  _supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];\n  currentState: ?string;\n  isAvailable: boolean;\n\n  constructor() {\n    super(NativeAppState);\n\n    this.isAvailable = true;\n    this._eventHandlers = this._supportedEvents.reduce((handlers, key) => {\n      handlers[key] = new Map();\n      return handlers;\n    }, {});\n\n    this.currentState = NativeAppState.getConstants().initialAppState;\n\n    let eventUpdated = false;\n\n    // TODO: this is a terrible solution - in order to ensure `currentState`\n    // prop is up to date, we have to register an observer that updates it\n    // whenever the state changes, even if nobody cares. We should just\n    // deprecate the `currentState` property and get rid of this.\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n\n    // TODO: see above - this request just populates the value of `currentState`\n    // when the module is first initialized. Would be better to get rid of the\n    // prop and expose `getCurrentAppState` method directly.\n    NativeAppState.getCurrentAppState(appStateData => {\n      // It's possible that the state will have changed here & listeners need to be notified\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See https://reactnative.dev/docs/appstate.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    invariant(\n      this._supportedEvents.indexOf(type) !== -1,\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n\n    switch (type) {\n      case 'change': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('appStateDidChange', appStateData => {\n            handler(appStateData.app_state);\n          }),\n        );\n        break;\n      }\n      case 'memoryWarning': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('memoryWarning', handler),\n        );\n        break;\n      }\n\n      case 'blur':\n      case 'focus': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('appStateFocusChange', hasFocus => {\n            if (type === 'blur' && !hasFocus) {\n              handler();\n            }\n            if (type === 'focus' && hasFocus) {\n              handler();\n            }\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Remove a handler by passing the `change` event type and the handler.\n   *\n   * See https://reactnative.dev/docs/appstate.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    invariant(\n      this._supportedEvents.indexOf(type) !== -1,\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n    this._eventHandlers[type].get(handler).remove();\n    this._eventHandlers[type].delete(handler);\n  }\n}\n\nfunction throwMissingNativeModule() {\n  invariant(\n    false,\n    'Cannot use AppState module when native RCTAppState is not included in the build.\\n' +\n      'Either include it, or check AppState.isAvailable before calling any methods.',\n  );\n}\n\nclass MissingNativeAppStateShim extends EventEmitter {\n  // AppState\n  isAvailable: boolean = false;\n  currentState: ?string = null;\n\n  addEventListener(type: string, handler: Function) {\n    throwMissingNativeModule();\n  }\n\n  removeEventListener(type: string, handler: Function) {\n    throwMissingNativeModule();\n  }\n\n  // EventEmitter\n  addListener() {\n    throwMissingNativeModule();\n  }\n\n  removeAllListeners() {\n    throwMissingNativeModule();\n  }\n\n  removeSubscription() {\n    throwMissingNativeModule();\n  }\n}\n\n// This module depends on the native `RCTAppState` module. If you don't include it,\n// `AppState.isAvailable` will return `false`, and any method calls will throw.\n// We reassign the class variable to keep the autodoc generator happy.\nconst AppStateInstance: AppState | MissingNativeAppStateShim = NativeAppState\n  ? new AppState()\n  : new MissingNativeAppStateShim();\n\nmodule.exports = AppStateInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}