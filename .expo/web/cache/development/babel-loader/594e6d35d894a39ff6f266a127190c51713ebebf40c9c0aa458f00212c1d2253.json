{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport * as geolib from \"geolib\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { CommonActions, useNavigation } from \"@react-navigation/native\";\nimport MapView, { Circle, Marker, PROVIDER_GOOGLE } from \"react-native-maps\";\nimport { useSelector } from \"react-redux\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport * as Location from \"expo-location\";\nimport Toast from \"react-native-root-toast\";\nimport GlobalStyles from \"../../../../../Utils/GlobalStyles\";\nimport Customers_Location_Styles from \"../../PickupReq/Customers_Location/Customers_Location_Styles\";\nimport GlobalColors from \"../../../../../Utils/GlobalColors\";\nimport * as TaskManager from \"expo-task-manager\";\nimport Header_Global from \"../../../../../Components/Header_Global\";\nimport ApiController from \"../../../../../Api/ApiController\";\nimport OwnStorage from \"../../../../../Api/StorageController\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport NoInternet from \"../../../../../Components/nointernet\";\nimport Add_Request_styles from \"../../../Vehicle_Load/AddRequest_styles\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport strings from \"../../../../../constants/lng/LocalizedStrings\";\nimport Geocoder from \"react-native-geocoding\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Customers_Location(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var api = new ApiController();\n  var localdata = new OwnStorage();\n  var mapref = useRef(null);\n  var screenWidth = Dimensions.get(\"window\").width;\n  var screenHeight = Dimensions.get(\"window\").height;\n  var _useState = useState(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    speed = _useState2[0],\n    setspeed = _useState2[1];\n  var _useSelector = useSelector(function (state) {\n      return state.recyclerequestsdetails;\n    }),\n    Coordinates = _useSelector.Coordinates;\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    SelectedCustomerLocation = _useState4[0],\n    SetSelectedCustomerLocation = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    SelectedRequestId = _useState6[0],\n    SetSelectedRequestId = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    routestart = _useState8[0],\n    setroutestart = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    MarkersList = _useState10[0],\n    setMarkersList = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    Time = _useState12[0],\n    SetTime = _useState12[1];\n  var apiKey = \"AIzaSyDXoHO79vxypTv8xL4V10cf5kFpIYDO9Rk\";\n  Geocoder.init(\"AIzaSyDXoHO79vxypTv8xL4V10cf5kFpIYDO9Rk\");\n  var _useState13 = useState(),\n    _useState14 = _slicedToArray(_useState13, 2),\n    pin = _useState14[0],\n    setPin = _useState14[1];\n  var _useState15 = useState(),\n    _useState16 = _slicedToArray(_useState15, 2),\n    MarkerDriver = _useState16[0],\n    setMarkerDriver = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    distance = _useState18[0],\n    setdistance = _useState18[1];\n  var _useState19 = useState(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    location = _useState20[0],\n    setLocation = _useState20[1];\n  var navigations = useNavigation();\n  var _useState21 = useState(\"Customer Location\"),\n    _useState22 = _slicedToArray(_useState21, 2),\n    Address = _useState22[0],\n    setAddress = _useState22[1];\n  var _useState23 = useState(null),\n    _useState24 = _slicedToArray(_useState23, 2),\n    lat = _useState24[0],\n    setLat = _useState24[1];\n  var _useState25 = useState(null),\n    _useState26 = _slicedToArray(_useState25, 2),\n    long = _useState26[0],\n    setLong = _useState26[1];\n  var _useState27 = useState(false),\n    _useState28 = _slicedToArray(_useState27, 2),\n    nointernet = _useState28[0],\n    setnointernet = _useState28[1];\n  useEffect(function () {\n    var unsubscribe = NetInfo.addEventListener(function (state) {\n      console.log(\"Connection type\", state.type);\n      console.log(\"Is connected?\", state.isConnected);\n      if (state.isConnected === false) {\n        setnointernet(true);\n      } else if (state.isConnected === true) {\n        setnointernet(false);\n      }\n    });\n  });\n  useEffect(function _callee() {\n    var _await$Location$reque, status, _await$Location$reque2, status2, location;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestBackgroundPermissionsAsync());\n          case 2:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n          case 6:\n            _await$Location$reque2 = _context.sent;\n            status2 = _await$Location$reque2.status2;\n            if (!(status !== \"granted\" && status2 !== \"granted\")) {\n              _context.next = 10;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n              enableHighAccuracy: true,\n              timeout: 15000,\n              maximumAge: 10000\n            }));\n          case 12:\n            location = _context.sent;\n            setPin({\n              latitude: location.coords.latitude,\n              longitude: location.coords.longitude\n            });\n            Geocoder.from(Coordinates[0].latitude, Coordinates[0].longitude).then(function (json) {\n              var addressComponent = json.results[0].formatted_address;\n              console.log(addressComponent);\n              setAddress(addressComponent);\n            }).catch(function (error) {\n              return console.warn(error);\n            });\n            SetSelectedCustomerLocation({\n              latitude: Coordinates[0].latitude,\n              longitude: Coordinates[0].longitude\n            });\n            SetSelectedRequestId(Coordinates[0].id);\n            calculatePreciseDistance(Coordinates[0].latitude, Coordinates[0].longitude, location.coords.latitude, location.coords.longitude);\n            setspeed(location.coords.speed < 1 ? 1 : parseFloat(location.coords.speed).toFixed(6));\n            setLat(location.coords.latitude);\n            setLong(location.coords.longitude);\n            setLocation(location);\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [Coordinates]);\n  var calculatePreciseDistance = function calculatePreciseDistance(lat, long, pinlat, pinlong) {\n    var pdis;\n    return _regeneratorRuntime.async(function calculatePreciseDistance$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            pdis = geolib.getDistance({\n              latitude: pinlat,\n              longitude: pinlong\n            }, {\n              latitude: lat,\n              longitude: long\n            });\n            setdistance(pdis);\n            SetTime(pdis / speed / 60);\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  var getAddres = function getAddres(lat, long) {\n    var Address;\n    return _regeneratorRuntime.async(function getAddres$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(Location.reverseGeocodeAsync({\n              latitude: lat,\n              longitude: long\n            }));\n          case 2:\n            Address = _context3.sent;\n            setAddress(Address[0].street + \" \" + Address[0].city + \" \" + Address[0].country);\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  var MarkOngoing = function MarkOngoing(SelectedRequestId) {\n    var formdata, token;\n    return _regeneratorRuntime.async(function MarkOngoing$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            formdata = new FormData();\n            formdata.append(\"_method\", \"PATCH\");\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(localdata.getvalue(\"api_token_Driver\"));\n          case 4:\n            token = _context4.sent;\n            api.Ongoing(token, SelectedRequestId, formdata).then(function (response) {\n              console.log(\"updated response status\", response);\n            }).catch(function (error) {\n              console.log(\"error\", error);\n              if (error.response.status == 401) {\n                Toast.show(\"You are Blocked by the Admin\");\n                navigation.navigate(\"Login\");\n              }\n              for (var _i = 0, _Object$entries = Object.entries(error); _i < _Object$entries.length; _i++) {\n                var _ref2 = _Object$entries[_i];\n                var _ref3 = _slicedToArray(_ref2, 2);\n                var key = _ref3[0];\n                var value = _ref3[1];\n                console.log(key + \": \" + value);\n                Toast.show(key + \": \" + value);\n              }\n            });\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  var Rote_button_press = function Rote_button_press() {\n    setroutestart(true);\n    MarkOngoing(Coordinates[0].id);\n    mapref.current.fitToCoordinates([{\n      latitude: MarkerDriver.latitude,\n      longitude: MarkerDriver.longitude\n    }]);\n  };\n  var renderItems_marker = function renderItems_marker(item, i) {\n    return _jsxs(MapView.Marker, {\n      identifier: \"mk1\",\n      coordinate: item,\n      pinColor: GlobalColors.Green,\n      onPress: function onPress(event) {},\n      children: [_jsx(Text, {\n        style: {\n          backgroundColor: \"green\",\n          color: \"white\",\n          padding: 5,\n          borderWidth: 1,\n          borderColor: \"yellow\",\n          fontSize: 12,\n          fontWeight: \"bold\"\n        },\n        children: item.customerName\n      }), _jsx(Image, {\n        source: item.image ? {\n          uri: item.image\n        } : require(\"../../../../../assets/glocation.png\"),\n        style: item.image ? Customers_Location_Styles.customercircularimg : {\n          height: 37.33,\n          width: 28,\n          alignSelf: \"center\"\n        }\n      })]\n    }, i);\n  };\n  if (pin == \"\" || pin == undefined) {\n    return _jsx(ActivityIndicator, {\n      style: {\n        flex: 1\n      },\n      size: \"large\",\n      color: GlobalColors.Green\n    });\n  } else {\n    return _jsxs(View, {\n      style: [Customers_Location_Styles.container, GlobalStyles.FlexDirectionColumn],\n      children: [_jsxs(View, {\n        style: Add_Request_styles.header,\n        children: [_jsx(TouchableOpacity, {\n          style: Add_Request_styles.backStyle,\n          onPress: function onPress() {\n            navigation.navigate(\"PickupReq\");\n          },\n          children: _jsx(Image, {\n            style: {\n              height: 16.97,\n              width: 10.61\n            },\n            source: require(\"../../../../../assets/back.png\")\n          })\n        }), _jsx(Text, {\n          style: Add_Request_styles.headerTitle,\n          children: strings.CUSTOMER\n        }), _jsx(View, {\n          style: {\n            width: 30,\n            height: 30\n          }\n        })]\n      }), _jsx(View, {\n        style: GlobalStyles.cardview,\n        children: _jsxs(View, {\n          style: [GlobalStyles.cardview, {\n            backgroundColor: \"white\",\n            paddingTop: \"5%\"\n          }],\n          children: [_jsx(View, {\n            style: Customers_Location_Styles.mapview,\n            children: _jsxs(MapView, {\n              ref: mapref,\n              provider: PROVIDER_GOOGLE,\n              followsUserLocation: true,\n              showsCompass: true,\n              showsPointsOfInterest: false,\n              showsUserLocation: true,\n              style: {\n                height: \"100%\",\n                width: \"100%\",\n                borderRadius: 6\n              },\n              onUserLocationChange: function onUserLocationChange(e) {\n                setPin({\n                  latitude: e.nativeEvent.coordinate.latitude,\n                  longitude: e.nativeEvent.coordinate.longitude,\n                  latitudeDelta: 0.0922,\n                  longitudeDelta: 0.0421\n                });\n              },\n              onLayout: function onLayout() {\n                setMarkerDriver(pin);\n                mapref.current.fitToCoordinates([{\n                  latitude: pin.latitude,\n                  longitude: pin.longitude\n                }, {\n                  latitude: Coordinates[0].latitude,\n                  longitude: Coordinates[0].longitude\n                }], {\n                  edgePadding: {\n                    top: 50,\n                    right: 50,\n                    bottom: 50,\n                    left: 50\n                  }\n                });\n              },\n              children: [MarkerDriver ? _jsx(Marker, {\n                coordinate: MarkerDriver,\n                title: \"My Location\",\n                identifier: \"mk2\"\n              }) : null, Coordinates.map(renderItems_marker), routestart && MarkerDriver ? _jsx(MapViewDirections, {\n                origin: MarkerDriver,\n                strokeColor: \"blue\",\n                strokeWidth: 6,\n                destination: SelectedCustomerLocation,\n                apikey: apiKey\n              }) : null]\n            })\n          }), _jsxs(View, {\n            style: Customers_Location_Styles.routedetails,\n            children: [_jsxs(View, {\n              style: Customers_Location_Styles.innerContainerAddress,\n              children: [_jsx(Image, {\n                style: {\n                  marginRight: \"3%\",\n                  height: 24,\n                  width: 24\n                },\n                source: require(\"../../../../../assets/location.png\")\n              }), _jsx(Text, {\n                style: [Customers_Location_Styles.txt_info_loc, {\n                  width: \"90%\"\n                }],\n                children: Address\n              })]\n            }), _jsxs(View, {\n              style: Customers_Location_Styles.innerContainerrow,\n              children: [_jsxs(View, {\n                style: Customers_Location_Styles.innerContainerroute,\n                children: [_jsx(Image, {\n                  style: {\n                    marginRight: \"3%\",\n                    height: 24,\n                    width: 26\n                  },\n                  source: require(\"../../../../../assets/navroute.png\")\n                }), _jsxs(Text, {\n                  style: Customers_Location_Styles.txt_info_loc,\n                  children: [distance / 1000, \"km\"]\n                })]\n              }), _jsxs(View, {\n                style: Customers_Location_Styles.innerContainertime,\n                children: [_jsx(Image, {\n                  style: {\n                    marginLeft: \"3%\",\n                    height: 24,\n                    width: 24\n                  },\n                  source: require(\"../../../../../assets/time.png\")\n                }), _jsxs(Text, {\n                  style: Customers_Location_Styles.txt_info_loc,\n                  children: [parseFloat(Time).toFixed(0), \" Min\"]\n                })]\n              })]\n            })]\n          }), routestart ? _jsx(View, {\n            style: {\n              marginTop: \"2%\",\n              marginRight: \"5%\",\n              marginLeft: \"5%\"\n            },\n            children: _jsxs(View, {\n              style: {\n                flexDirection: \"row\",\n                justifyContent: \"space-between\"\n              },\n              children: [_jsx(TouchableOpacity, {\n                style: Customers_Location_Styles.Buttongreen,\n                onPress: function onPress() {\n                  return navigations.navigate(\"Receive_Items\", {\n                    RR_id: SelectedRequestId\n                  }) + setroutestart(false);\n                },\n                children: _jsx(View, {\n                  style: Customers_Location_Styles.buttonviewrow,\n                  children: _jsx(Text, {\n                    style: {\n                      color: \"white\",\n                      fontSize: 12,\n                      fontFamily: \"Poppins_600SemiBold\"\n                    },\n                    children: strings.RECEIVEITEMS\n                  })\n                })\n              }), _jsx(TouchableOpacity, {\n                style: Customers_Location_Styles.Buttongreen,\n                onPress: function onPress() {\n                  return navigations.navigate(\"False_Request\", {\n                    RR_id: SelectedRequestId\n                  }) + setroutestart(false);\n                },\n                children: _jsx(View, {\n                  style: Customers_Location_Styles.buttonviewrow,\n                  children: _jsx(Text, {\n                    style: {\n                      color: \"white\",\n                      fontSize: 12,\n                      fontFamily: \"Poppins_600SemiBold\"\n                    },\n                    children: strings.FALSEREQUEST\n                  })\n                })\n              })]\n            })\n          }) : _jsx(View, {\n            style: Customers_Location_Styles.route_start,\n            children: _jsx(TouchableOpacity, {\n              style: Customers_Location_Styles.Button2,\n              onPress: function onPress() {\n                return Rote_button_press();\n              },\n              children: _jsx(Text, {\n                style: GlobalStyles.ButtonTextMain,\n                children: strings.ROUTESTART\n              })\n            })\n          })]\n        })\n      }), _jsx(NoInternet, {\n        internet: nointernet\n      })]\n    });\n  }\n}","map":{"version":3,"names":["geolib","React","useState","useEffect","useRef","CommonActions","useNavigation","MapView","Circle","Marker","PROVIDER_GOOGLE","useSelector","MapViewDirections","Location","Toast","GlobalStyles","Customers_Location_Styles","GlobalColors","TaskManager","Header_Global","ApiController","OwnStorage","NetInfo","NoInternet","Add_Request_styles","ActivityIndicator","strings","Geocoder","jsx","_jsx","jsxs","_jsxs","Customers_Location","_ref","route","navigation","api","localdata","mapref","screenWidth","Dimensions","get","width","screenHeight","height","_useState","_useState2","_slicedToArray","speed","setspeed","_useSelector","state","recyclerequestsdetails","Coordinates","_useState3","_useState4","SelectedCustomerLocation","SetSelectedCustomerLocation","_useState5","_useState6","SelectedRequestId","SetSelectedRequestId","_useState7","_useState8","routestart","setroutestart","_useState9","_useState10","MarkersList","setMarkersList","_useState11","_useState12","Time","SetTime","apiKey","init","_useState13","_useState14","pin","setPin","_useState15","_useState16","MarkerDriver","setMarkerDriver","_useState17","_useState18","distance","setdistance","_useState19","_useState20","location","setLocation","navigations","_useState21","_useState22","Address","setAddress","_useState23","_useState24","lat","setLat","_useState25","_useState26","long","setLong","_useState27","_useState28","nointernet","setnointernet","unsubscribe","addEventListener","console","log","type","isConnected","_callee","_await$Location$reque","status","_await$Location$reque2","status2","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","requestBackgroundPermissionsAsync","sent","requestForegroundPermissionsAsync","abrupt","getCurrentPositionAsync","enableHighAccuracy","timeout","maximumAge","latitude","coords","longitude","from","then","json","addressComponent","results","formatted_address","catch","error","warn","id","calculatePreciseDistance","parseFloat","toFixed","stop","Promise","pinlat","pinlong","pdis","calculatePreciseDistance$","_context2","getDistance","getAddres","getAddres$","_context3","reverseGeocodeAsync","street","city","country","MarkOngoing","formdata","token","MarkOngoing$","_context4","FormData","append","getvalue","Ongoing","response","show","navigate","_i","_Object$entries","Object","entries","length","_ref2","_ref3","key","value","Rote_button_press","current","fitToCoordinates","renderItems_marker","item","i","identifier","coordinate","pinColor","Green","onPress","event","children","Text","style","backgroundColor","color","padding","borderWidth","borderColor","fontSize","fontWeight","customerName","Image","source","image","uri","require","customercircularimg","alignSelf","undefined","flex","size","View","container","FlexDirectionColumn","header","TouchableOpacity","backStyle","headerTitle","CUSTOMER","cardview","paddingTop","mapview","ref","provider","followsUserLocation","showsCompass","showsPointsOfInterest","showsUserLocation","borderRadius","onUserLocationChange","e","nativeEvent","latitudeDelta","longitudeDelta","onLayout","edgePadding","top","right","bottom","left","title","map","origin","strokeColor","strokeWidth","destination","apikey","routedetails","innerContainerAddress","marginRight","txt_info_loc","innerContainerrow","innerContainerroute","innerContainertime","marginLeft","marginTop","flexDirection","justifyContent","Buttongreen","RR_id","buttonviewrow","fontFamily","RECEIVEITEMS","FALSEREQUEST","route_start","Button2","ButtonTextMain","ROUTESTART","internet"],"sources":["C:/Users/Ayamo/Downloads/driver-master/Screens/Home/Pickup_Requests/PickupReq/Customers_Location/Customers_Location.js"],"sourcesContent":["import {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Dimensions,\n  Image,\n  ScrollView,\n} from \"react-native\";\nimport * as geolib from \"geolib\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { CommonActions, useNavigation } from \"@react-navigation/native\";\nimport MapView, { Circle, Marker, PROVIDER_GOOGLE } from \"react-native-maps\";\nimport { useSelector } from \"react-redux\";\nimport MapViewDirections from \"react-native-maps-directions\";\n\nimport * as Location from \"expo-location\";\nimport Toast from \"react-native-root-toast\";\nimport GlobalStyles from \"../../../../../Utils/GlobalStyles\";\nimport Customers_Location_Styles from \"../../PickupReq/Customers_Location/Customers_Location_Styles\";\nimport GlobalColors from \"../../../../../Utils/GlobalColors\";\nimport * as TaskManager from \"expo-task-manager\";\nimport Header_Global from \"../../../../../Components/Header_Global\";\nimport ApiController from \"../../../../../Api/ApiController\";\nimport OwnStorage from \"../../../../../Api/StorageController\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport NoInternet from \"../../../../../Components/nointernet\";\nimport Add_Request_styles from \"../../../Vehicle_Load/AddRequest_styles\";\nimport { ActivityIndicator } from \"react-native\";\nimport strings from \"../../../../../constants/lng/LocalizedStrings\";\nimport Geocoder from \"react-native-geocoding\";\n\nexport default function Customers_Location({ route, navigation }) {\n  // const { item_res } = route.params;\n\n  var api = new ApiController();\n  var localdata = new OwnStorage();\n  const mapref = useRef(null);\n  const screenWidth = Dimensions.get(\"window\").width;\n  const screenHeight = Dimensions.get(\"window\").height;\n  const [speed, setspeed] = useState(1);\n  const { Coordinates } = useSelector((state) => state.recyclerequestsdetails);\n  const [SelectedCustomerLocation, SetSelectedCustomerLocation] = useState();\n  const [SelectedRequestId, SetSelectedRequestId] = useState();\n\n  const [routestart, setroutestart] = useState(false);\n  const [MarkersList, setMarkersList] = useState([]);\n  const [Time, SetTime] = useState(0);\n  const apiKey = \"AIzaSyDXoHO79vxypTv8xL4V10cf5kFpIYDO9Rk\";\n  Geocoder.init(\"AIzaSyDXoHO79vxypTv8xL4V10cf5kFpIYDO9Rk\");\n\n  const [pin, setPin] = useState();\n  const [MarkerDriver, setMarkerDriver] = useState();\n  const [distance, setdistance] = useState(0);\n  const [location, setLocation] = useState(null);\n  const navigations = useNavigation();\n  const [Address, setAddress] = useState(\"Customer Location\");\n  const [lat, setLat] = useState(null);\n  const [long, setLong] = useState(null);\n\n  const [nointernet, setnointernet] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = NetInfo.addEventListener((state) => {\n      console.log(\"Connection type\", state.type);\n      console.log(\"Is connected?\", state.isConnected);\n\n      if (state.isConnected === false) {\n        setnointernet(true);\n      } else if (state.isConnected === true) {\n        setnointernet(false);\n      }\n    });\n  });\n  useEffect(async () => {\n    // The screen is focused\n    // Call any action\n    // Permissions.request(PERMISSIONS.ANDROID.ACCESS_COARSE_LOCATION);\n\n    let { status } = await Location.requestBackgroundPermissionsAsync();\n    let { status2 } = await Location.requestForegroundPermissionsAsync();\n\n    if (status !== \"granted\" && status2 !== \"granted\") {\n      // Toast.show(\"Permission to access location was denied\");\n      return;\n    }\n\n    let location = await Location.getCurrentPositionAsync({\n      enableHighAccuracy: true,\n      timeout: 15000,\n      maximumAge: 10000,\n    });\n\n    setPin({\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    });\n    // let Address = await Location.reverseGeocodeAsync({\n    //   latitude: Coordinates[0].latitude,\n    //   longitude: Coordinates[0].longitude,\n    // });\n    Geocoder.from(Coordinates[0].latitude, Coordinates[0].longitude)\n      .then((json) => {\n        const addressComponent = json.results[0].formatted_address;\n        console.log(addressComponent);\n\n        setAddress(addressComponent);\n      })\n      .catch((error) => console.warn(error));\n    SetSelectedCustomerLocation({\n      latitude: Coordinates[0].latitude,\n      longitude: Coordinates[0].longitude,\n    });\n    SetSelectedRequestId(Coordinates[0].id);\n    // Toast.show(\"You've entered iddd region:\" + SelectedRequestId);\n\n    // console.log(Address);\n\n    // setAddress(\n    //   Address[0].street + \" \" + Address[0].city + \" \" + Address[0].country\n    // );\n    calculatePreciseDistance(\n      Coordinates[0].latitude,\n      Coordinates[0].longitude,\n      location.coords.latitude,\n      location.coords.longitude\n    );\n\n    setspeed(\n      location.coords.speed < 1\n        ? 1\n        : parseFloat(location.coords.speed).toFixed(6)\n    );\n\n    setLat(location.coords.latitude);\n    setLong(location.coords.longitude);\n    setLocation(location);\n    // console.log(location.coords);\n    // console.log(\"Address\", Address[0].street);\n\n    // let region = {\n    //   identifier: \"LOCATION_GEOFENCE\",\n    //   latitude: Coordinates[0].latitude,\n    //   longitude: Coordinates[0].longitude,\n    //   radius: 30,\n    // };\n    // TaskManager.defineTask(\n    //   \"LOCATION_GEOFENCE\",\n    //   ({ data: { eventType, region }, error }) => {\n    //     if (error) {\n    //       Toast.show(error);\n    //       return;\n    //     }\n    //     if (eventType === Location.GeofencingEventType.Enter) {\n    //       setroutestart(true);\n    //       // Toast.show(\"enter in region!\");\n    //       console.log(\"You've entered region:\", region);\n    //     } else if (eventType === Location.GeofencingEventType.Exit) {\n    //       setroutestart(false);\n\n    //       console.log(\"You've left region:\", region);\n    //       // Toast.show(\"You've left region\");\n    //     }\n    //   }\n    // );\n\n    // Location.startGeofencingAsync(\"LOCATION_GEOFENCE\", [region]);\n\n    // Return the function to unsubscribe from the event so it gets removed on unmount\n  }, [Coordinates]); //////need to remove 1 if want to get continious location change by asim\n\n  const calculatePreciseDistance = async (lat, long, pinlat, pinlong) => {\n    var pdis = geolib.getDistance(\n      { latitude: pinlat, longitude: pinlong },\n      { latitude: lat, longitude: long }\n    );\n\n    setdistance(pdis);\n    // console.log(\"Precise Distance\", pdis / 1000);\n    // console.log(\"Distance\", pdis);\n    // console.log(\"Speed\", speed);\n\n    // console.log(\"timeee\", pdis / 0 / 60);\n    SetTime(pdis / speed / 60);\n    // (`Precise Distance\\n\\n${pdis} Meter\\nOR\\n${pdis / 1000} KM`);\n  };\n  const getAddres = async (lat, long) => {\n    let Address = await Location.reverseGeocodeAsync({\n      latitude: lat,\n      longitude: long,\n    });\n    setAddress(\n      Address[0].street + \" \" + Address[0].city + \" \" + Address[0].country\n    );\n\n    // console.log(\"location change\", Address);\n  };\n  const MarkOngoing = async (SelectedRequestId) => {\n    const formdata = new FormData();\n    formdata.append(\"_method\", \"PATCH\");\n\n    var token = await localdata.getvalue(\"api_token_Driver\");\n\n    api\n      .Ongoing(token, SelectedRequestId, formdata)\n      .then((response) => {\n        console.log(\"updated response status\", response);\n\n        // Toast.show(strings.requestmarkedasongoing);\n      })\n      .catch((error) => {\n        console.log(\"error\", error);\n        if (error.response.status == 401) {\n          Toast.show(\"You are Blocked by the Admin\");\n          navigation.navigate(\"Login\");\n        }\n        for (const [key, value] of Object.entries(error)) {\n          console.log(`${key}: ${value}`);\n          Toast.show(`${key}: ${value}`);\n        }\n      });\n  };\n\n  const Rote_button_press = () => {\n    setroutestart(true);\n    MarkOngoing(Coordinates[0].id);\n\n    mapref.current.fitToCoordinates([\n      { latitude: MarkerDriver.latitude, longitude: MarkerDriver.longitude },\n    ]);\n    // if (\n    //   SelectedCustomerLocation == null ||\n    //   SelectedCustomerLocation == undefined\n    // ) {\n    //   Toast.show(\"Please select Customer to start route\");\n    // } else {\n    // }\n  };\n\n  // const coordinates = [\n  //   { latitude: 32.50379997634203, longitude: 74.5050372076353 },\n  // ];\n\n  /////////////////////////////////for testing static markers\n\n  const renderItems_marker = (item, i) => {\n    return (\n      <MapView.Marker\n        key={i}\n        identifier={\"mk1\"}\n        coordinate={item}\n        pinColor={GlobalColors.Green}\n        onPress={(event) => {\n          // SetSelectedCustomerLocation(event.nativeEvent.coordinate);\n          // SetSelectedRequestId(item.id);\n          // Toast.show(SelectedRequestId);\n          // // console.log(\"Updated Location\", location.latitude);\n          // let lat, long;\n          // lat = item.latitude;\n          // long = item.longitude;\n          // getAddres(parseFloat(lat), parseFloat(long));\n          // //  Address = Location.reverseGeocodeAsync(location);\n          // calculatePreciseDistance(lat, long);\n        }}\n      >\n        <Text\n          style={{\n            backgroundColor: \"green\",\n            color: \"white\",\n            padding: 5,\n            borderWidth: 1,\n            borderColor: \"yellow\",\n            fontSize: 12,\n            fontWeight: \"bold\",\n          }}\n        >\n          {item.customerName}\n        </Text>\n        <Image\n          source={\n            item.image\n              ? { uri: item.image }\n              : require(\"../../../../../assets/glocation.png\")\n          }\n          style={\n            item.image\n              ? Customers_Location_Styles.customercircularimg\n              : { height: 37.33, width: 28, alignSelf: \"center\" }\n          }\n        />\n      </MapView.Marker>\n    );\n  };\n  //////////////////////////////////Muhammad Asim/////////////////////////////\n  if (pin == \"\" || pin == undefined) {\n    return (\n      <ActivityIndicator\n        style={{ flex: 1 }}\n        size=\"large\"\n        color={GlobalColors.Green}\n      ></ActivityIndicator>\n    );\n  } else {\n    return (\n      <View\n        style={[\n          Customers_Location_Styles.container,\n          GlobalStyles.FlexDirectionColumn,\n        ]}\n      >\n        <View style={Add_Request_styles.header}>\n          <TouchableOpacity\n            style={Add_Request_styles.backStyle}\n            onPress={() => {\n              // const resetAction = CommonActions.reset({\n              //   index: 0,\n              //   routes: [{ name: \"Add_Request\" }],\n              // });\n              navigation.navigate(\"PickupReq\");\n            }}\n          >\n            <Image\n              style={{ height: 16.97, width: 10.61 }}\n              source={require(\"../../../../../assets/back.png\")}\n            />\n          </TouchableOpacity>\n          <Text style={Add_Request_styles.headerTitle}>{strings.CUSTOMER}</Text>\n          <View style={{ width: 30, height: 30 }} />\n        </View>\n\n        <View style={GlobalStyles.cardview}>\n          <View\n            style={[\n              GlobalStyles.cardview,\n              { backgroundColor: \"white\", paddingTop: \"5%\" },\n            ]}\n          >\n            <View style={Customers_Location_Styles.mapview}>\n              <MapView\n                ref={mapref}\n                provider={PROVIDER_GOOGLE}\n                followsUserLocation={true}\n                showsCompass={true}\n                showsPointsOfInterest={false}\n                showsUserLocation={true}\n                style={{ height: \"100%\", width: \"100%\", borderRadius: 6 }}\n                onUserLocationChange={(e) => {\n                  // console.log(\"onUserLocationChange\", e.nativeEvent.coordinate);\n                  setPin({\n                    latitude: e.nativeEvent.coordinate.latitude,\n                    longitude: e.nativeEvent.coordinate.longitude,\n                    latitudeDelta: 0.0922,\n                    longitudeDelta: 0.0421,\n                  });\n                }}\n                onLayout={() => {\n                  setMarkerDriver(pin);\n\n                  // console.log(\"mapdata\", mapref);\n\n                  mapref.current.fitToCoordinates(\n                    [\n                      { latitude: pin.latitude, longitude: pin.longitude },\n                      {\n                        latitude: Coordinates[0].latitude,\n                        longitude: Coordinates[0].longitude,\n                      },\n                    ],\n                    {\n                      edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },\n                    }\n                  );\n\n                  // mapref.current.fitToSuppliedMarkers([\"mk1\", \"mk2\"], {\n                  //   edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },\n                  // });\n                }}\n              >\n                {MarkerDriver ? (\n                  <Marker\n                    coordinate={MarkerDriver}\n                    title=\"My Location\"\n                    identifier={\"mk2\"}\n                  ></Marker>\n                ) : null}\n\n                {Coordinates.map(renderItems_marker)}\n\n                {/* <Circle\n              center={pin}\n              radius={200}\n              strokeColor=\"green\"\n              strokeWidth={0.5}\n            /> */}\n                {routestart && MarkerDriver ? (\n                  <MapViewDirections\n                    origin={MarkerDriver}\n                    strokeColor={\"blue\"}\n                    strokeWidth={6}\n                    destination={SelectedCustomerLocation}\n                    apikey={apiKey}\n                  />\n                ) : null}\n              </MapView>\n            </View>\n            <View style={Customers_Location_Styles.routedetails}>\n              <View style={Customers_Location_Styles.innerContainerAddress}>\n                {\n                  <Image\n                    style={{ marginRight: \"3%\", height: 24, width: 24 }}\n                    source={require(\"../../../../../assets/location.png\")}\n                  ></Image>\n                }\n                {\n                  <Text\n                    style={[\n                      Customers_Location_Styles.txt_info_loc,\n                      { width: \"90%\" },\n                    ]}\n                  >\n                    {Address}\n                  </Text>\n                }\n              </View>\n              <View style={Customers_Location_Styles.innerContainerrow}>\n                <View style={Customers_Location_Styles.innerContainerroute}>\n                  {\n                    <Image\n                      style={{ marginRight: \"3%\", height: 24, width: 26 }}\n                      source={require(\"../../../../../assets/navroute.png\")}\n                    ></Image>\n                  }\n                  {\n                    <Text style={Customers_Location_Styles.txt_info_loc}>\n                      {distance / 1000}km\n                    </Text>\n                  }\n                </View>\n                <View style={Customers_Location_Styles.innerContainertime}>\n                  {\n                    <Image\n                      style={{ marginLeft: \"3%\", height: 24, width: 24 }}\n                      source={require(\"../../../../../assets/time.png\")}\n                    ></Image>\n                  }\n                  {\n                    <Text style={Customers_Location_Styles.txt_info_loc}>\n                      {parseFloat(Time).toFixed(0)} Min\n                    </Text>\n                  }\n                </View>\n              </View>\n            </View>\n            {routestart ? (\n              <View\n                style={{ marginTop: \"2%\", marginRight: \"5%\", marginLeft: \"5%\" }}\n              >\n                <View\n                  style={{\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <TouchableOpacity\n                    style={Customers_Location_Styles.Buttongreen}\n                    onPress={() =>\n                      navigations.navigate(\"Receive_Items\", {\n                        RR_id: SelectedRequestId,\n                      }) + setroutestart(false)\n                    }\n                  >\n                    <View style={Customers_Location_Styles.buttonviewrow}>\n                      <Text\n                        style={{\n                          color: \"white\",\n                          fontSize: 12,\n                          fontFamily: \"Poppins_600SemiBold\",\n                        }}\n                      >\n                        {strings.RECEIVEITEMS}\n                      </Text>\n                    </View>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={Customers_Location_Styles.Buttongreen}\n                    onPress={() =>\n                      navigations.navigate(\"False_Request\", {\n                        RR_id: SelectedRequestId,\n                      }) + setroutestart(false)\n                    }\n                  >\n                    <View style={Customers_Location_Styles.buttonviewrow}>\n                      <Text\n                        style={{\n                          color: \"white\",\n                          fontSize: 12,\n                          fontFamily: \"Poppins_600SemiBold\",\n                        }}\n                      >\n                        {strings.FALSEREQUEST}\n                      </Text>\n                    </View>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ) : (\n              <View style={Customers_Location_Styles.route_start}>\n                <TouchableOpacity\n                  style={Customers_Location_Styles.Button2}\n                  onPress={() => Rote_button_press()}\n                >\n                  <Text style={GlobalStyles.ButtonTextMain}>\n                    {strings.ROUTESTART}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            )}\n          </View>\n        </View>\n        <NoInternet internet={nointernet} />\n      </View>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}