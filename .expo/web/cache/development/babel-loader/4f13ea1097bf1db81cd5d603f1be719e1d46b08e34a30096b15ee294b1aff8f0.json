{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport messaging from \"@react-native-firebase/messaging\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-root-toast\";\nimport PushNotification from \"react-native-push-notification\";\nPushNotification.createChannel({\n  channelId: \"shorex driver app notifications\",\n  channelName: \"com.shorexdriver\",\n  channelDescription: \"manager notifications\",\n  soundName: \"default\",\n  importance: 4,\n  vibrate: true\n}, function (created) {\n  return console.log(`createChannel returned '${created}'`);\n});\nexport function requestUserPermissions() {\n  return _requestUserPermissions.apply(this, arguments);\n}\nfunction _requestUserPermissions() {\n  _requestUserPermissions = _asyncToGenerator(function* () {\n    var authStatus = yield messaging().requestPermission();\n    var enabled = authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n    if (enabled) {\n      console.log(\"Authorization status:\", authStatus);\n      getFcmToken();\n    }\n  });\n  return _requestUserPermissions.apply(this, arguments);\n}\nvar getFcmToken = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var fcmToken = yield AsyncStorage.getItem(\"fcmToken\");\n    console.log(\"the user old token===>\", fcmToken);\n    if (!fcmToken) {\n      try {\n        var _fcmToken = yield messaging().getToken();\n        if (_fcmToken) {\n          console.log(\"new generated fcm token===>\", _fcmToken), yield AsyncStorage.setItem(\"fcmToken\", _fcmToken);\n        }\n      } catch (error) {\n        console.log(\"error rasied fcm token===>\", error);\n        Toast.show(error.message);\n      }\n    }\n  });\n  return function getFcmToken() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["messaging","AsyncStorage","Toast","PushNotification","createChannel","channelId","channelName","channelDescription","soundName","importance","vibrate","created","console","log","requestUserPermissions","_requestUserPermissions","apply","arguments","_asyncToGenerator","authStatus","requestPermission","enabled","AuthorizationStatus","AUTHORIZED","PROVISIONAL","getFcmToken","_ref","fcmToken","getItem","getToken","setItem","error","show","message"],"sources":["C:/Users/Ayamo/Downloads/driver-master/Utils/pushnotification_helper.js"],"sourcesContent":["import messaging from \"@react-native-firebase/messaging\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-root-toast\";\nimport PushNotification from \"react-native-push-notification\";\n\nPushNotification.createChannel(\n  {\n    channelId: \"shorex driver app notifications\", // (required)\n    channelName: \"com.shorexdriver\", // (required)\n    channelDescription: \"manager notifications\", // (optional) default: undefined.\n    soundName: \"default\", // (optional) See `soundName` parameter of `localNotification` function\n    importance: 4, // (optional) default: 4. Int value of the Android notification importance\n    vibrate: true, // (optional) default: true. Creates the default vibration patten if true.\n  },\n  (created) => console.log(`createChannel returned '${created}'`)\n);\nexport async function requestUserPermissions() {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED ||\n    authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log(\"Authorization status:\", authStatus);\n    getFcmToken();\n  }\n}\n\nconst getFcmToken = async () => {\n  let fcmToken = await AsyncStorage.getItem(\"fcmToken\");\n  console.log(\"the user old token===>\", fcmToken);\n  if (!fcmToken) {\n    try {\n      const fcmToken = await messaging().getToken();\n      if (fcmToken) {\n        console.log(\"new generated fcm token===>\", fcmToken),\n          await AsyncStorage.setItem(\"fcmToken\", fcmToken);\n      }\n    } catch (error) {\n      console.log(\"error rasied fcm token===>\", error);\n      Toast.show(error.message);\n    }\n  }\n};\n\n// export const NotificationListener = async () => {\n//   const disptach = useDispatch();\n//   // Assume a message-notification contains a \"type\" property in the data payload of the screen to open\n\n//   messaging().onNotificationOpenedApp((remoteMessage) => {\n//     console.log(\n//       \"Notification caused app to open from background state:\",\n//       remoteMessage.notification\n//     );\n//     // Check whether an initial notification is available\n//     messaging()\n//       .getInitialNotification()\n//       .then((remoteMessage) => {\n//         if (remoteMessage) {\n//           console.log(\n//             \"Notification caused app to open from quit state:\",\n//             remoteMessage.notification\n//           );\n//         }\n//       });\n//     //navigation.navigate(remoteMessage.data.type);\n//   });\n//   //   messaging().onNotificationOpenedApp((remoteMessage) => {\n//   //     if (remoteMessage.data.entity === \"ideas\") {\n//   //       console.log(\n//   //         \"Notification caused app to open from background state:\",\n//   //         remoteMessage.data.id\n//   //       );\n//   //     //   let ids = JSON.parse(remoteMessage.data.id);\n//   //     //   RootNavigation.navigate(\"NotificationCards\", {\n//   //     //     IDs: ids,\n//   //     //   });\n//   //     }\n//   //   });\n\n//   messaging().onMessage(async (remoteMessage) => {\n//     // if (remoteMessage.data.entity === \"ideas\") {\n//     console.log(\"recived in foreground===>\", remoteMessage);\n\n//     PushNotification.localNotification({\n//       channelId: \"shorex driver app notifications\",\n//       message: remoteMessage.notification.body,\n//       title: remoteMessage.notification.title,\n//       bigPictureUrl: remoteMessage.notification.android.imageUrl,\n//       smallIcon: remoteMessage.notification.android.imageUrl,\n//     });\n//     // let ids = JSON.parse(remoteMessage.data.id);\n//     // RootNavigation.navigate(\"NotificationCards\", {\n//     //   IDs: ids,\n//     // });\n//     // }\n//   });\n\n//   //   messaging()\n//   //     .getInitialNotification()\n//   //     .then(async (remoteMessage) => {\n//   //       if (remoteMessage.data.entity === \"ideas\") {\n//   //         let ids = JSON.parse(remoteMessage.data.id);\n//   //         await AsyncStorage.setItem(\"postIDs\", JSON.stringify(ids));\n//   //         let storage = await AsyncStorage.getItem(\"postIDs\");\n//   //         console.log(\"storage\", storage);\n//   //         RootNavigation.navigate(\"NotificationCards\", {\n//   //           IDs: ids,\n//   //         });\n//   //         console.log(\n//   //           \"Notification caused app to open from quit state:\",\n//   //           remoteMessage.data.id\n//   //         );\n//   //       }\n//   //     });\n\n//   // messaging().onMessage(async (remoteMessage) => {\n//   //   console.log(\"Notification on forground state\", remoteMessage);\n//   // });\n// };\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,kCAAkC;AACxD,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,gBAAgB,MAAM,gCAAgC;AAE7DA,gBAAgB,CAACC,aAAa,CAC5B;EACEC,SAAS,EAAE,iCAAiC;EAC5CC,WAAW,EAAE,kBAAkB;EAC/BC,kBAAkB,EAAE,uBAAuB;EAC3CC,SAAS,EAAE,SAAS;EACpBC,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE;AACX,CAAC,EACD,UAACC,OAAO;EAAA,OAAKC,OAAO,CAACC,GAAG,CAAE,2BAA0BF,OAAQ,GAAE,CAAC;AAAA,CACjE,CAAC;AACD,gBAAsBG,sBAAsBA,CAAA;EAAA,OAAAC,uBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAU3C,SAAAF,wBAAA;EAAAA,uBAAA,GAAAG,iBAAA,CAVM,aAAwC;IAC7C,IAAMC,UAAU,SAASnB,SAAS,CAAC,CAAC,CAACoB,iBAAiB,CAAC,CAAC;IACxD,IAAMC,OAAO,GACXF,UAAU,KAAKnB,SAAS,CAACsB,mBAAmB,CAACC,UAAU,IACvDJ,UAAU,KAAKnB,SAAS,CAACsB,mBAAmB,CAACE,WAAW;IAE1D,IAAIH,OAAO,EAAE;MACXT,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEM,UAAU,CAAC;MAChDM,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAAA,OAAAV,uBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,IAAMQ,WAAW;EAAA,IAAAC,IAAA,GAAAR,iBAAA,CAAG,aAAY;IAC9B,IAAIS,QAAQ,SAAS1B,YAAY,CAAC2B,OAAO,CAAC,UAAU,CAAC;IACrDhB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEc,QAAQ,CAAC;IAC/C,IAAI,CAACA,QAAQ,EAAE;MACb,IAAI;QACF,IAAMA,SAAQ,SAAS3B,SAAS,CAAC,CAAC,CAAC6B,QAAQ,CAAC,CAAC;QAC7C,IAAIF,SAAQ,EAAE;UACZf,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEc,SAAQ,CAAC,QAC5C1B,YAAY,CAAC6B,OAAO,CAAC,UAAU,EAAEH,SAAQ,CAAC;QACpD;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdnB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEkB,KAAK,CAAC;QAChD7B,KAAK,CAAC8B,IAAI,CAACD,KAAK,CAACE,OAAO,CAAC;MAC3B;IACF;EACF,CAAC;EAAA,gBAfKR,WAAWA,CAAA;IAAA,OAAAC,IAAA,CAAAV,KAAA,OAAAC,SAAA;EAAA;AAAA,GAehB"},"metadata":{},"sourceType":"module","externalDependencies":[]}