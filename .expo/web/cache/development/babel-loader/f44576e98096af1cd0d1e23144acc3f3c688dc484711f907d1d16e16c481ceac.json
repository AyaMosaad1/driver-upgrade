{"ast":null,"code":"'use strict';\n\nvar Platform = require(\"../../Utilities/Platform\");\nvar ReactNativeViewViewConfigAndroid = require(\"./ReactNativeViewViewConfigAndroid\");\nvar registerGeneratedViewConfig = require(\"../../Utilities/registerGeneratedViewConfig\");\nvar requireNativeComponent = require(\"../../ReactNative/requireNativeComponent\");\nimport * as React from 'react';\nimport codegenNativeCommands from \"../../Utilities/codegenNativeCommands\";\nvar NativeViewComponent;\nvar viewConfig;\nif (__DEV__ || global.RN$Bridgeless) {\n  if (Platform.OS === 'android') {\n    viewConfig = ReactNativeViewViewConfigAndroid;\n    registerGeneratedViewConfig('RCTView', ReactNativeViewViewConfigAndroid);\n  } else {\n    viewConfig = {};\n    registerGeneratedViewConfig('RCTView', {\n      uiViewClassName: 'RCTView'\n    });\n  }\n  NativeViewComponent = 'RCTView';\n} else {\n  NativeViewComponent = requireNativeComponent('RCTView');\n}\nexport var __INTERNAL_VIEW_CONFIG = viewConfig;\nexport var Commands = codegenNativeCommands({\n  supportedCommands: ['hotspotUpdate', 'setPressed']\n});\nexport default NativeViewComponent;","map":{"version":3,"names":["Platform","require","ReactNativeViewViewConfigAndroid","registerGeneratedViewConfig","requireNativeComponent","React","codegenNativeCommands","NativeViewComponent","viewConfig","__DEV__","global","RN$Bridgeless","OS","uiViewClassName","__INTERNAL_VIEW_CONFIG","Commands","supportedCommands"],"sources":["C:/Users/Ayamo/Downloads/driver-master/node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst ReactNativeViewViewConfigAndroid = require('./ReactNativeViewViewConfigAndroid');\n\nconst registerGeneratedViewConfig = require('../../Utilities/registerGeneratedViewConfig');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\n\nimport * as React from 'react';\n\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport type {ViewProps} from './ViewPropTypes';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\n\nexport type ViewNativeComponentType = HostComponent<ViewProps>;\n\nlet NativeViewComponent;\nlet viewConfig:\n  | {...}\n  | {|\n      bubblingEventTypes?: $ReadOnly<{\n        [eventName: string]: $ReadOnly<{|\n          phasedRegistrationNames: $ReadOnly<{|\n            bubbled: string,\n            captured: string,\n          |}>,\n        |}>,\n        ...,\n      }>,\n      directEventTypes?: $ReadOnly<{\n        [eventName: string]: $ReadOnly<{|registrationName: string|}>,\n        ...,\n      }>,\n      uiViewClassName: string,\n      validAttributes?: {\n        [propName: string]:\n          | true\n          | $ReadOnly<{|\n              diff?: <T>(arg1: any, arg2: any) => boolean,\n              process?: (arg1: any) => any,\n            |}>,\n        ...,\n      },\n    |};\n\nif (__DEV__ || global.RN$Bridgeless) {\n  // On Android, View extends the base component with additional view-only props\n  // On iOS, the base component is View\n  if (Platform.OS === 'android') {\n    viewConfig = ReactNativeViewViewConfigAndroid;\n    registerGeneratedViewConfig('RCTView', ReactNativeViewViewConfigAndroid);\n  } else {\n    viewConfig = {};\n    registerGeneratedViewConfig('RCTView', {uiViewClassName: 'RCTView'});\n  }\n\n  NativeViewComponent = 'RCTView';\n} else {\n  NativeViewComponent = requireNativeComponent('RCTView');\n}\n\nexport const __INTERNAL_VIEW_CONFIG = viewConfig;\n\ninterface NativeCommands {\n  +hotspotUpdate: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    x: number,\n    y: number,\n  ) => void;\n  +setPressed: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    pressed: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['hotspotUpdate', 'setPressed'],\n});\n\nexport default ((NativeViewComponent: any): ViewNativeComponentType);\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAMA,QAAQ,GAAGC,OAAO,2BAA2B,CAAC;AACpD,IAAMC,gCAAgC,GAAGD,OAAO,qCAAqC,CAAC;AAEtF,IAAME,2BAA2B,GAAGF,OAAO,8CAA8C,CAAC;AAC1F,IAAMG,sBAAsB,GAAGH,OAAO,2CAA2C,CAAC;AAElF,OAAO,KAAKI,KAAK,MAAM,OAAO;AAE9B,OAAOC,qBAAqB;AAM5B,IAAIC,mBAAmB;AACvB,IAAIC,UA0BE;AAEN,IAAIC,OAAO,IAAIC,MAAM,CAACC,aAAa,EAAE;EAGnC,IAAIX,QAAQ,CAACY,EAAE,KAAK,SAAS,EAAE;IAC7BJ,UAAU,GAAGN,gCAAgC;IAC7CC,2BAA2B,CAAC,SAAS,EAAED,gCAAgC,CAAC;EAC1E,CAAC,MAAM;IACLM,UAAU,GAAG,CAAC,CAAC;IACfL,2BAA2B,CAAC,SAAS,EAAE;MAACU,eAAe,EAAE;IAAS,CAAC,CAAC;EACtE;EAEAN,mBAAmB,GAAG,SAAS;AACjC,CAAC,MAAM;EACLA,mBAAmB,GAAGH,sBAAsB,CAAC,SAAS,CAAC;AACzD;AAEA,OAAO,IAAMU,sBAAsB,GAAGN,UAAU;AAchD,OAAO,IAAMO,QAAwB,GAAGT,qBAAqB,CAAiB;EAC5EU,iBAAiB,EAAE,CAAC,eAAe,EAAE,YAAY;AACnD,CAAC,CAAC;AAEF,eAAiBT,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}